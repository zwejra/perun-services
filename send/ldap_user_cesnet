#!/usr/bin/perl
use strict;
use warnings;
no if $] >= 5.018, warnings => "smartmatch";
use Net::LDAPS;
use Net::LDAP::Entry;
use Net::LDAP::Message;
use Net::LDAP::LDIF;
use DBI;

# Import shared AD library
use ADConnector;
use ScriptLock;

sub process_add;
sub process_update;
sub ping_password_setter;

# log counters
my $counter_add = 0;
my $counter_update = 0;
my $counter_fail = 0;

# define service
my $service_name = "ad_user_mu";

# GEN folder location
my $facility_name = $ARGV[0];
chomp($facility_name);
my $service_files_base_dir="../gen/spool";
my $service_files_dir="$service_files_base_dir/$facility_name/$service_name";

# BASE DN
open my $file, '<', "$service_files_dir/baseDN";
my $base_dn = <$file>;
chomp($base_dn);
close $file;

# propagation destination
my $namespace = $ARGV[1];
chomp($namespace);

# create service lock
my $lock = ScriptLock->new($facility_name . "_" . $service_name . "_" . $namespace);
($lock->lock() == 1) or die "Unable to get lock, service propagation was already running.";

# init configuration
my @conf = init_config($namespace);
my $ldap = ldap_connect($conf[0]);
my $filter = '(objectClass=person)';

# connect
ldap_bind($ldap, $conf[1], $conf[2]);

# load all data
my @perun_entries = load_perun($service_files_dir . "/" . $service_name . ".ldif");
my @ad_entries = load_ad($ldap, $base_dn, $filter, ['cn','uid','sn','givenName','mail','eduPersonPrincipalNames','telephoneNumber','mobile','entryStatus', @opt_attrs]);
# tady doplnit atributy
my %ad_entries_map = ();

foreach my $ad_entry (@ad_entries) {

	my $login = $ad_entry->get_value('uid');
	if ($login =~ /^[0-9]+$/) {
		$ad_entries_map{ $login } = $ad_entry;
	}

}

# process data
process_add();
process_update();

# disconnect
ldap_unbind($ldap);

# log results
ldap_log($service_name, "Added: " . $counter_add . " entries.");
ldap_log($service_name, "Updated: " . $counter_update. " entries.");
ldap_log($service_name, "Failed: " . $counter_fail. " entries.");

# print results for TaskResults in GUI
print "Added: " . $counter_add . " entries.\n";
print "Updated: " . $counter_update. " entries.\n";
print "Failed: " . $counter_fail. " entries.\n";

$lock->unlock();

if ($counter_fail > 0) { die "Failed to process: " . $counter_fail . " entries.\nSee log at: ~/perun-engine/send/logs/$service_name.log";}

# END of main script

###########################################
#
# Main processing functions
#
###########################################

#
# Add new user entries to AD
# We create only entries for normal UÄŒO users
#
sub process_add() {

	foreach my $perun_entry (@perun_entries) {

		unless (exists $ad_entries_map{$login}) {

			# Add new entry to AD
			my $response = $perun_entry->update($ldap);
			unless ($response->is_error()) {
				# SUCCESS
				ldap_log($service_name, "Added: " . $perun_entry->dn());
				$counter_add++;
			} else {
				# FAIL
				ldap_log($service_name, "NOT added: " . $perun_entry->dn() . " | " . $response->error());
				ldap_log($service_name, $perun_entry->ldif());
				$counter_fail++;
			}

		}

	}
}

#
# Update existing user entries in AD
#
sub process_update() {

	foreach my $perun_entry (@perun_entries) {

		if (exists $ad_entries_map{$perun_entry->get_value('uid')}) {

			my $ad_entry = $ad_entries_map{$perun_entry->get_value('uid')};
			my @attrs = ('uid','cn','sn','givenName','mail','eduPersonPrincipalNames','telephoneNumber','mobile','entryStatus', @opt_attrs);

			# stored log messages to check if entry should be updated
			my @entry_changed = ();

			# check each attribute
			foreach my $attr (@attrs) {
				if (compare_entry($ad_entry , $perun_entry , $attr) == 1) {
					# store value for log
					my @ad_val = $ad_entry->get_value($attr);
					my @perun_val = $perun_entry->get_value($attr);
					push(@entry_changed, "$attr | " . join(", ",sort(@ad_val)) .  " => " . join(", ",sort(@perun_val)));
					# replace value
					$ad_entry->replace(
						$attr => \@perun_val
					);
				}
			}

			if (@entry_changed) {
				# Update entry in AD
				my $response = $ad_entry->update($ldap);
				unless ($response->is_error()) {
					# SUCCESS
					foreach my $log_message (@entry_changed) {
						ldap_log($service_name, "Updated: " . $ad_entry->dn() . " | " . $log_message);
					}
					$counter_update++;
				} else {
					# FAIL
					ldap_log($service_name, "NOT updated: " . $ad_entry->dn() . " | " . $response->error());
					ldap_log($service_name, $ad_entry->ldif());
					$counter_fail++;
				}
			}

		}

	}
}
